{
	"info": {
		"_postman_id": "80f34d7c-f105-49b1-9136-2d9a5f1fbb37",
		"name": "ServeRest",
		"description": "O ServeRest é uma API REST gratuita que simula uma loja virtual, projetada para servir  \ncomo um recurso valioso no estudo e teste de APIs. Este ambiente oferece uma variedade de  \nfuncionalidades essenciais, incluindo autenticação de usuários, registro de contas,  \ngerenciamento de produtos e carrinhos de compras.\n\nNeste contexto, vamos explorar de forma abrangente os principais aspectos dessa  \nferramenta, abordando tanto as funcionalidades críticas quanto as melhores práticas em  \nqualidade de software. Ao fazê-lo, destacaremos a importância do teste de APIs como um  \ncomponente vital para garantir a qualidade e confiabilidade da experiência do usuário final.  \nAlém disso, estaremos prontos para identificar e relatar quaisquer inconsistências que possam surgir durante o uso do ServeRest, contribuindo assim para seu aprimoramento contínuo.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30292165"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "CT_101: Login válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Login realizado com sucesso')\r",
									"})\r",
									"\r",
									"propertyName = 'authorization'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"fulano@qa.com\",\r\n  \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login válido",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"teste@teste.com\",\r\n  \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "d2042439633c5a50c118708482eb7880;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:37:24 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "268"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Login realizado com sucesso\",\n    \"authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlQHRlc3RlLmNvbSIsInBhc3N3b3JkIjoidGVzdGUiLCJpYXQiOjE2OTY4MTU0NDQsImV4cCI6MTY5NjgxNjA0NH0.w3btIWY8X9PLCFPXRPSYEv5Xvuklp3ukh7e1Mfx7qPU\"\n}"
						}
					]
				},
				{
					"name": "CT_102: Login inválido (usuário não cadastrado)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Email e/ou senha inválidos')\r",
									"})\r",
									"\r",
									"propertyName = 'authorization'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.not.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login inválido (usuário não cadastrado)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "c4709cdbcb69486be7bb9fe0e1399b1a"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:37:30 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "48"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Email e/ou senha inválidos\"\n}"
						}
					]
				},
				{
					"name": "CT_103: Login inválido (email inválido)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'email'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('email deve ser um email válido')\r",
									"})\r",
									"\r",
									"propertyName = 'authorization'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.not.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{$randomWord}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login inválido (email inválido)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomWord}}\",\r\n  \"password\": \"{{$randomPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "7e8e613bcda1240cb2a72d32739b46c4;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:37:35 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "50"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"email deve ser um email válido\"\n}"
						}
					]
				},
				{
					"name": "CT_104: Login inválido (campos vazios)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'email'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[propertyName]).to.eql('email é obrigatório')\r",
									"})\r",
									"\r",
									"propertyName = 'password'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[propertyName]).to.eql('password é obrigatório')\r",
									"})\r",
									"\r",
									"\r",
									"propertyName = 'authorization'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[propertyName]).to.not.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": [
						{
							"name": "Login inválido (campos vazios)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/login",
									"host": [
										"{{host}}"
									],
									"path": [
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "ecd46a0bb6db47de4656577fb2eeab42"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:37:38 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "84"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"email é obrigatório\",\n    \"password\": \"password é obrigatório\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Usuários",
			"item": [
				{
					"name": "CT_201: Listar todos os usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'quantidade'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'usuarios'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								""
							]
						}
					},
					"response": [
						{
							"name": "Listar todos os usuários",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios/",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "5def30583652aad62a99718cf44458a8"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:37:43 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "9967"
								}
							],
							"cookie": [],
							"body": "{\n    \"quantidade\": 46,\n    \"usuarios\": [\n        {\n            \"nome\": \"cSZQXCNQ\",\n            \"email\": \"cSZQXCNQ@example.com\",\n            \"password\": \"cSZQXCNQ\",\n            \"administrador\": \"true\",\n            \"_id\": \"31MR81LOQLDh56Vf\"\n        },\n        {\n            \"nome\": \"Lester Moen\",\n            \"email\": \"Reuben.Treutel@gmail.com\",\n            \"password\": \"Ramona Lesch\",\n            \"administrador\": \"false\",\n            \"_id\": \"3LH6mH0peCAM9fPa\"\n        },\n        {\n            \"nome\": \"Joan Hickle\",\n            \"email\": \"Destinee_Considine38@yahoo.com\",\n            \"password\": \"iOjyTMG5lm9muu0\",\n            \"administrador\": \"true\",\n            \"_id\": \"3XuvV1z9eqiO4NSl\"\n        },\n        {\n            \"nome\": \"Teste\",\n            \"email\": \"teste@teste.com\",\n            \"password\": \"teste\",\n            \"administrador\": \"true\",\n            \"_id\": \"45tHVfyhhcr7DvFE\"\n        },\n        {\n            \"nome\": \"Melanie Olson\",\n            \"email\": \"Willy_Hilpert47@gmail.com\",\n            \"password\": \"Julio Pfeffer\",\n            \"administrador\": \"true\",\n            \"_id\": \"49is3wUy6ouQyMQF\"\n        },\n        {\n            \"nome\": \"Fulano da Silva\",\n            \"email\": \"izom@emailteste.com\",\n            \"password\": \"1234\",\n            \"administrador\": \"true\",\n            \"_id\": \"6Z4orVfRG5tyBVbN\"\n        },\n        {\n            \"nome\": \"raivLRQmlJEU\",\n            \"email\": \"raivLRQmlJEU@example.com\",\n            \"password\": \"raivLRQmlJEU\",\n            \"administrador\": \"true\",\n            \"_id\": \"7E9hzKrQJET1Nu5c\"\n        },\n        {\n            \"nome\": \"Fulano da Silva\",\n            \"email\": \"dgzn@emailteste.com\",\n            \"password\": \"1234\",\n            \"administrador\": \"true\",\n            \"_id\": \"7WWzWDlRoJzTXDuD\"\n        },\n        {\n            \"nome\": \"Darrell Heller\",\n            \"email\": \"Dejuan.Barton61@hotmail.com\",\n            \"password\": \"EbmYmmm0f7Z4Vh5\",\n            \"administrador\": \"false\",\n            \"_id\": \"88UEldgxKvdLDq38\"\n        },\n        {\n            \"nome\": \"Bill Hackett\",\n            \"email\": \"Katheryn99@hotmail.com\",\n            \"password\": \"wIcM1QWAy7JUL34\",\n            \"administrador\": \"false\",\n            \"_id\": \"9BYZnQfl4FuONtLw\"\n        },\n        {\n            \"nome\": \"OFc\",\n            \"email\": \"OFc@example.com\",\n            \"password\": \"OFc\",\n            \"administrador\": \"true\",\n            \"_id\": \"9Ybk20lIj1pJeiO3\"\n        },\n        {\n            \"nome\": \"vAvPeIlfcsJH\",\n            \"email\": \"vAvPeIlfcsJH@example.com\",\n            \"password\": \"vAvPeIlfcsJH\",\n            \"administrador\": \"true\",\n            \"_id\": \"AbTQCqtDGsEPs60U\"\n        },\n        {\n            \"nome\": \"qVd\",\n            \"email\": \"qVd@example.com\",\n            \"password\": \"qVd\",\n            \"administrador\": \"true\",\n            \"_id\": \"BkVaEfdz5RM38tVy\"\n        },\n        {\n            \"nome\": \"Larry Schinner\",\n            \"email\": \"Jermaine.Mertz26@gmail.com\",\n            \"password\": \"GCfEN1Wfr3SZ__Q\",\n            \"administrador\": \"true\",\n            \"_id\": \"DESdaxTRrIDyrTaJ\"\n        },\n        {\n            \"nome\": \"jeiLmlgr\",\n            \"email\": \"jeiLmlgr@example.com\",\n            \"password\": \"jeiLmlgr\",\n            \"administrador\": \"false\",\n            \"_id\": \"Ek9Wo6wEwjhlUKEe\"\n        },\n        {\n            \"nome\": \"GcB\",\n            \"email\": \"GcB@example.com\",\n            \"password\": \"GcB\",\n            \"administrador\": \"true\",\n            \"_id\": \"EmdTpy0i3sPBKBKY\"\n        },\n        {\n            \"nome\": \"xOjDsidu\",\n            \"email\": \"xOjDsidu@gmail.com\",\n            \"password\": \"xOjDsidu\",\n            \"administrador\": \"true\",\n            \"_id\": \"FKb4K9TcNtye7Z2g\"\n        },\n        {\n            \"nome\": \"Fulano da Silva\",\n            \"email\": \"pxam@emailteste.com\",\n            \"password\": \"1234\",\n            \"administrador\": \"true\",\n            \"_id\": \"H5VGVgZ7gtyA57hK\"\n        },\n        {\n            \"nome\": \"itPzyZYC\",\n            \"email\": \"itPzyZYC@example.com\",\n            \"password\": \"itPzyZYC\",\n            \"administrador\": \"true\",\n            \"_id\": \"JhdJK5ClqyW6Jegc\"\n        },\n        {\n            \"nome\": \"IqIjfKDL\",\n            \"email\": \"IqIjfKDL@gmail.com\",\n            \"password\": \"IqIjfKDL\",\n            \"administrador\": \"true\",\n            \"_id\": \"K7NLSnl9fuooVWAB\"\n        },\n        {\n            \"nome\": \"Jaime O'Conner\",\n            \"email\": \"Alda.Pfeffer63@gmail.com\",\n            \"password\": \"Georgia Marks\",\n            \"administrador\": \"false\",\n            \"_id\": \"KePXyu8nhrN4yhtj\"\n        },\n        {\n            \"nome\": \"abc\",\n            \"email\": \"a@gmail.com\",\n            \"password\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n            \"administrador\": \"false\",\n            \"_id\": \"M56qFFFRr4WUTeho\"\n        },\n        {\n            \"nome\": \"Lera\",\n            \"email\": \"lera_faker@hotmail.com\",\n            \"password\": \"3idy1bqarld2obz\",\n            \"administrador\": \"false\",\n            \"_id\": \"RiV5M5UJtJbzbXjz\"\n        },\n        {\n            \"nome\": \"wkEaCUBR\",\n            \"email\": \"wkEaCUBR@example.com\",\n            \"password\": \"wkEaCUBR\",\n            \"administrador\": \"true\",\n            \"_id\": \"SPBgJP3koMXqTmAb\"\n        },\n        {\n            \"nome\": \"Verna Medhurst\",\n            \"email\": \"Kelly44@hotmail.com\",\n            \"password\": \"lVEGpl8XdIf2M1D\",\n            \"administrador\": \"true\",\n            \"_id\": \"Sowej5safUN85in2\"\n        },\n        {\n            \"nome\": \"OPgMHulx\",\n            \"email\": \"OPgMHulx@example.com\",\n            \"password\": \"OPgMHulx\",\n            \"administrador\": \"true\",\n            \"_id\": \"ToFxTIRuIIq2zzSb\"\n        },\n        {\n            \"nome\": \"rAgRYKaG\",\n            \"email\": \"rAgRYKaG@example.com\",\n            \"password\": \"rAgRYKaG\",\n            \"administrador\": \"true\",\n            \"_id\": \"VCwt6f5Ph6Y5i3z9\"\n        },\n        {\n            \"nome\": \"Matheus Silveira\",\n            \"email\": \"ana-juliada-paz@example.org\",\n            \"password\": \"@)@EjCWcD3\",\n            \"administrador\": \"true\",\n            \"_id\": \"VuuAbzNsx2dvOADf\"\n        },\n        {\n            \"nome\": \"Malcolm Reichel\",\n            \"email\": \"Dorothy.Steuber@hotmail.com\",\n            \"password\": \"Krystal Ernser III\",\n            \"administrador\": \"false\",\n            \"_id\": \"WsEaoucxLx31Zu44\"\n        },\n        {\n            \"nome\": \"Ralph McCullough\",\n            \"email\": \"Danika_Windler@hotmail.com\",\n            \"password\": \"rDmnsDarEfZMblh\",\n            \"administrador\": \"true\",\n            \"_id\": \"X87QtRBzeC80l23e\"\n        },\n        {\n            \"nome\": \"KvHkblFIJptQ\",\n            \"email\": \"KvHkblFIJptQ@example.com\",\n            \"password\": \"KvHkblFIJptQ\",\n            \"administrador\": \"true\",\n            \"_id\": \"XY7BlNFcrUZUnWFH\"\n        },\n        {\n            \"nome\": \"Mr. Ruth Gerhold\",\n            \"email\": \"Carlotta.Pfannerstill@gmail.com\",\n            \"password\": \"m\",\n            \"administrador\": \"false\",\n            \"_id\": \"Yde9dWS0busITlcY\"\n        },\n        {\n            \"nome\": \"Monroe\",\n            \"email\": \"monroe_faker@hotmail.com\",\n            \"password\": \"my8wtgg0\",\n            \"administrador\": \"true\",\n            \"_id\": \"ZZgb22byIHYUGHRc\"\n        },\n        {\n            \"nome\": \"Mr. Sonya Stehr\",\n            \"email\": \"Alessia43@yahoo.com\",\n            \"password\": \"Gregory Cole\",\n            \"administrador\": \"true\",\n            \"_id\": \"bB8e6B5Vcn4WwJ5M\"\n        },\n        {\n            \"nome\": \"Rosy\",\n            \"email\": \"rosy_faker@hotmail.com\",\n            \"password\": \"ipfollnpii\",\n            \"administrador\": \"false\",\n            \"_id\": \"bUruMOe8daJfmeTb\"\n        },\n        {\n            \"nome\": \"Ms. Marianne Stokes\",\n            \"email\": \"Derick_Lindgren@yahoo.com\",\n            \"password\": \"Brooke Wunsch\",\n            \"administrador\": \"true\",\n            \"_id\": \"fPLCjfQqs1NF8mkg\"\n        },\n        {\n            \"nome\": \"Fulano da Silva\",\n            \"email\": \"dcqp@emailteste.com\",\n            \"password\": \"1234\",\n            \"administrador\": \"true\",\n            \"_id\": \"hJ2us5TcKFGK7ImB\"\n        },\n        {\n            \"nome\": \"Clint Schmidt\",\n            \"email\": \"Kenyatta.Lesch12@hotmail.com\",\n            \"password\": \"WebGbHMRqPZZpaD\",\n            \"administrador\": \"true\",\n            \"_id\": \"hfxwmVgIHZ0818LN\"\n        },\n        {\n            \"nome\": \"Antonio Gerhold\",\n            \"email\": \"Jamison45@gmail.com\",\n            \"password\": \"Terrell Bernhard\",\n            \"administrador\": \"false\",\n            \"_id\": \"ivwp4nOtmF3KkymU\"\n        },\n        {\n            \"nome\": \"jqONHbwI\",\n            \"email\": \"jqONHbwI@gmail.com\",\n            \"password\": \"jqONHbwI\",\n            \"administrador\": \"true\",\n            \"_id\": \"jKJ9GSozqLVfnQaU\"\n        },\n        {\n            \"nome\": \"222222\",\n            \"email\": \"aaa@gmail.com\",\n            \"password\": \"abc\",\n            \"administrador\": \"false\",\n            \"_id\": \"kbMndKuMStU6MbVQ\"\n        },\n        {\n            \"nome\": \"Teste99\",\n            \"email\": \"teste99@teste.com\",\n            \"password\": \"teste99\",\n            \"administrador\": \"false\",\n            \"_id\": \"m9AW38b6i1QlUhza\"\n        },\n        {\n            \"nome\": \"Paulo José\",\n            \"email\": \"paulo@jose.com\",\n            \"password\": \"123456\",\n            \"administrador\": \"true\",\n            \"_id\": \"n1TpBbMw7xiFwTtl\"\n        },\n        {\n            \"nome\": \"{{nome}}\",\n            \"email\": \"Elmo@qa.com.br\",\n            \"password\": \"K43Xma8rENJO2JS\",\n            \"administrador\": \"true\",\n            \"_id\": \"nN76VXSk8ts9QNlo\"\n        },\n        {\n            \"nome\": \"KOsuqRlg\",\n            \"email\": \"KOsuqRlg@example.com\",\n            \"password\": \"KOsuqRlg\",\n            \"administrador\": \"false\",\n            \"_id\": \"nrolOkzLCvHHA56Q\"\n        },\n        {\n            \"nome\": \"{{name}}\",\n            \"email\": \"Logan6@hotmail.com\",\n            \"password\": \"{{password}}\",\n            \"administrador\": \"true\",\n            \"_id\": \"oPkfKyzUc89984eH\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CT_202: Criar usuário válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Cadastro realizado com sucesso')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Criar usuário válido",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "70338787864c010f03f846ebedbf861d;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:37:48 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"S5NFm96R224RO8mK\"\n}"
						}
					]
				},
				{
					"name": "CT_203: Criar usuário inválido (email inválido)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'email'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('email deve ser um email válido')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomWord}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Criar usuário inválido (email inválido)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomWord}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "c4442a8a3c99b6dbbc2992829df22d5d"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:37:56 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "50"
								}
							],
							"cookie": [],
							"body": "{\n    \"email\": \"email deve ser um email válido\"\n}"
						}
					]
				},
				{
					"name": "CT_204: Criar usuário inválido (campos vazios)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'nome'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('nome não pode ficar em branco')\r",
									"})\r",
									"\r",
									"propertyName = 'email'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('email não pode ficar em branco')\r",
									"})\r",
									"\r",
									"propertyName = 'password'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('password não pode ficar em branco')\r",
									"})\r",
									"\r",
									"propertyName = 'administrador'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"administrador deve ser 'true' ou 'false'\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Criar usuário inválido (campos vazios)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "d4de6beb9b68817b56ade0638af274cd;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:01 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "215"
								}
							],
							"cookie": [],
							"body": "{\n    \"nome\": \"nome não pode ficar em branco\",\n    \"email\": \"email não pode ficar em branco\",\n    \"password\": \"password não pode ficar em branco\",\n    \"administrador\": \"administrador deve ser 'true' ou 'false'\"\n}"
						}
					]
				},
				{
					"name": "CT_205: Criar usuário inválido (duplicidade)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Este email já está sendo usado')\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/usuarios`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const firstUser = result.usuarios[0];\r",
									"            const nomeUser = firstUser.nome;\r",
									"            const emailUser = firstUser.email;\r",
									"            \r",
									"            pm.variables.set('nomeUser', nomeUser);\r",
									"            pm.variables.set('emailUser', emailUser);\r",
									"        } else {\r",
									"            console.log(\"Nenhum usuário encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nomeUser}}\",\r\n  \"email\": \"{{emailUser}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Criar usuário inválido (duplicidade)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeUser}}\",\r\n  \"email\": \"{{emailUser}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "a953012b8e864d2f75d943be54e814d1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:06 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "53"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				},
				{
					"name": "CT_206: Criar usuário inválido (senha não segura)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'password'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('password deve possuir letras, números e símbolos')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomLoremWords}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Criar usuário inválido (senha não segura)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomLoremWords}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "9829be7ee8ea448f12d2cb827ea11fe7;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:40:08 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"5oRz36urPYluYlyK\"\n}"
						}
					]
				},
				{
					"name": "CT_207: Criar usuário inválido (senha sem limite máximo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'password'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('password deve possuir, no máximo, 20 caracteres')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomLoremText}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "Criar usuário inválido (senha sem limite máximo)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomLoremText}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "5864bee503b3738694542b3a48cffef0;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:44:31 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"egwG17fPO5r5O06j\"\n}"
						}
					]
				},
				{
					"name": "CT_208: Criar usuário inválido (senha sem limite mínimo)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'password'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('password deve possuir, no mínimo, 8 caracteres')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"a\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": [
						{
							"name": "CT_208: Criar usuário inválido (senha sem limite mínimo)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"a\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "30981bab8ecb08bc16b1d8f22a184985;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 13:39:57 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"nHH1dZxpTBVJi9ww\"\n}"
						}
					]
				},
				{
					"name": "CT_209: Listar usuário por ID válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'nome'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'email'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'password'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'administrador'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = '_id'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/usuarios`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastUser = result.usuarios[result.usuarios.length - 1];\r",
									"            const listUser = lastUser._id; \r",
									"\r",
									"            pm.environment.set('listUser', listUser);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum usuário encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/{{listUser}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"{{listUser}}"
							]
						}
					},
					"response": [
						{
							"name": "Listar usuário por ID válido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/usuarios/{{listUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"{{listUser}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "634d30c939e28853348aac45344f9ee8"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:15 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "153"
								}
							],
							"cookie": [],
							"body": "{\n    \"nome\": \"{{name}}\",\n    \"email\": \"Logan6@hotmail.com\",\n    \"password\": \"{{password}}\",\n    \"administrador\": \"true\",\n    \"_id\": \"oPkfKyzUc89984eH\"\n}"
						}
					]
				},
				{
					"name": "CT_210: Listar usuário por ID inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Usuário não encontrado')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/{{randomLoremWords}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"{{randomLoremWords}}"
							]
						}
					},
					"response": [
						{
							"name": "Listar usuário por ID inválido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/usuarios/{{randomLoremWords}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"{{randomLoremWords}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "6655f30401ef8fd18ec8609e4a617b8f"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:19 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "45"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Usuário não encontrado\"\n}"
						}
					]
				},
				{
					"name": "CT_211: Deletar usuário por ID válido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/usuarios`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastUser = result.usuarios[result.usuarios.length - 1];\r",
									"            const deleteUser = lastUser._id; \r",
									"\r",
									"            pm.environment.set('deleteUser', deleteUser);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum usuário encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Registro excluído com sucesso')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/{{deleteUser}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"{{deleteUser}}"
							]
						}
					},
					"response": [
						{
							"name": "Deletar usuário por ID válido",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/usuarios/{{deleteUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"{{deleteUser}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "476224bf41cb0c001a8e6ded7692b827"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:25 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "51"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Registro excluído com sucesso\"\n}"
						}
					]
				},
				{
					"name": "CT_212: Deletar usuário por ID inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Nenhum registro excluído')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/{{$randomLoremWords}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"{{$randomLoremWords}}"
							]
						}
					},
					"response": [
						{
							"name": "Deletar usuário por ID inválido",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/usuarios/{{$randomLoremWords}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"{{$randomLoremWords}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "25b31325bd68d5b59befb62f955b9655"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:30 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "46"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Nenhum registro excluído\"\n}"
						}
					]
				},
				{
					"name": "CT_213: Deletar usuário inválido (campos vazios)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 405\", function() {\r",
									"    pm.response.to.have.status(405);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Não é possível realizar DELETE em /usuarios/. Acesse https://serverest.dev para ver as rotas disponíveis e como utilizá-las.')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								""
							]
						}
					},
					"response": [
						{
							"name": "Deletar usuário por ID inválido (campos vazios)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/usuarios/",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										""
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "6b44ef5f0bb7f65cfe84fb7462a87b29;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:35 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "150"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Não é possível realizar DELETE em /usuarios/. Acesse https://serverest.dev para ver as rotas disponíveis e como utilizá-las.\"\n}"
						}
					]
				},
				{
					"name": "CT_214: Editar usuário por ID válido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/usuarios`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastUser = result.usuarios[result.usuarios.length - 1];\r",
									"            const editUser = lastUser._id; \r",
									"            pm.environment.set('editUser', editUser);\r",
									"        } else {\r",
									"            console.log(\"Nenhum usuário encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const email = '{{$randomEmail}}'\r",
									"const nome = '{{$randomFullName}}'\r",
									"\r",
									"pm.variables.set('email', email);\r",
									"pm.variables.set('nome', nome);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[propertyName]).to.eql('Registro alterado com sucesso')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/{{editUser}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"{{editUser}}"
							]
						}
					},
					"response": [
						{
							"name": "Editar usuário por ID válido",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios/{{editUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"{{editUser}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "7fab669da1963b4e55687a8ccd26752b"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:40 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "50"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Registro alterado com sucesso\"\n}"
						}
					]
				},
				{
					"name": "CT_215: Editar usuário inválido (caminho vazio)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 405\", function() {\r",
									"    pm.response.to.have.status(405);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Não é possível realizar PUT em /usuarios/. Acesse https://serverest.dev para ver as rotas disponíveis e como utilizá-las.')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								""
							]
						}
					},
					"response": [
						{
							"name": "Editar usuário inválido (caminho vazio)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/usuarios/",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										""
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "4e81d985014bfe3057b1a858dc79362a;o=1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:46 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "147"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Não é possível realizar PUT em /usuarios/. Acesse https://serverest.dev para ver as rotas disponíveis e como utilizá-las.\"\n}"
						}
					]
				},
				{
					"name": "CT_216: Editar usuário inválido (campos vazios)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'nome'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('nome é obrigatório')\r",
									"})\r",
									"\r",
									"propertyName = 'email'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('email é obrigatório')\r",
									"})\r",
									"\r",
									"propertyName = 'password'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('password é obrigatório')\r",
									"})\r",
									"\r",
									"propertyName = 'administrador'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('administrador é obrigatório')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/usuarios/{{$randomLoremWords}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"{{$randomLoremWords}}"
							]
						}
					},
					"response": [
						{
							"name": "Editar usuário inválido (campos vazios)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/usuarios/{{$randomLoremWords}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"{{$randomLoremWords}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "82ca92e82665684dd54a81ff03ef53d6"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:51 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "174"
								}
							],
							"cookie": [],
							"body": "{\n    \"nome\": \"nome é obrigatório\",\n    \"email\": \"email é obrigatório\",\n    \"password\": \"password é obrigatório\",\n    \"administrador\": \"administrador é obrigatório\"\n}"
						}
					]
				},
				{
					"name": "CT_217: Editar usuário (novo ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/usuarios`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const firstUser = result.usuarios[0];\r",
									"            const editUser = firstUser._id; \r",
									"\r",
									"            pm.environment.set('editUser', editUser);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum usuário encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"function geraStringAleatoria (size) {\r",
									"    var string = '';\r",
									"    var caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    for (var i = 0; i < size; i++) {\r",
									"        string += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
									"    }\r",
									"    return string;\r",
									"}\r",
									"\r",
									"const email = '{{$randomEmail}}'\r",
									"const nome = '{{$randomFullName}}'\r",
									"const id = geraStringAleatoria(16);\r",
									"\r",
									"pm.variables.set('email', email);\r",
									"pm.variables.set('name', nome);\r",
									"pm.environment.set('editNewUser', id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Cadastro realizado com sucesso');\r",
									"})\r",
									"\r",
									"propertyName = '_id'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{name}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/editNewUser",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"editNewUser"
							]
						}
					},
					"response": [
						{
							"name": "Editar usuário (novo ID)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{name}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios/editNewUser",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"editNewUser"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "eb6894ab0b116f318f9a1b660ede2114"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:38:57 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"6T0BS6cGYclCdQn6\"\n}"
						}
					]
				},
				{
					"name": "CT_218: Editar usuário (duplicidade)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/usuarios`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastUser = result.usuarios[result.usuarios.length - 1];\r",
									"            const firstUser = result.usuarios[0];\r",
									"            const editUser = lastUser._id; \r",
									"            \r",
									"            const nameUser = lastUser.nome\r",
									"            const passwordUser = lastUser.password\r",
									"            const emailUser = firstUser.email;\r",
									"\r",
									"            pm.variables.set('emailUser', emailUser);\r",
									"            pm.variables.set('name', nameUser);\r",
									"            pm.variables.set('password', passwordUser);\r",
									"            pm.environment.set('editUser', editUser);\r",
									"        } else {\r",
									"            console.log(\"Nenhum usuário encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Este email já está sendo usado')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nameUser}}\",\r\n  \"email\": \"{{emailUser}}\",\r\n  \"password\": \"{{namePassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/usuarios/{{editUser}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"usuarios",
								"{{editUser}}"
							]
						}
					},
					"response": [
						{
							"name": "Editar usuário (duplicidade)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nameUser}}\",\r\n  \"email\": \"{{emailUser}}\",\r\n  \"password\": \"{{namePassword}}\",\r\n  \"administrador\": \"{{$randomBoolean}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/usuarios/{{editUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"usuarios",
										"{{editUser}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "cda67c1745b934f152f4804f4a82feb9"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 01:39:03 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "53"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Este email já está sendo usado\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "CT_301: Listar todos os produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'quantidade'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'produtos'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": [
						{
							"name": "CT_301: Listar todos os produtos",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/produtos",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "6f96a533ee914e1ee771b608320daed2"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:37:58 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "435"
								}
							],
							"cookie": [],
							"body": "{\n    \"quantidade\": 2,\n    \"produtos\": [\n        {\n            \"nome\": \"Logitech MX Vertical\",\n            \"preco\": 470,\n            \"descricao\": \"Mouse\",\n            \"quantidade\": 382,\n            \"_id\": \"BeeJh5lz3k6kSIzA\"\n        },\n        {\n            \"nome\": \"Samsung 60 polegadas\",\n            \"preco\": 5240,\n            \"descricao\": \"TV\",\n            \"quantidade\": 49977,\n            \"_id\": \"K6leHdftCeOJj8BJ\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CT_ 302: Criar produto válido (com token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomQuant = Math.floor(Math.random() * 101);\r",
									"const randomPreco = Math.floor(Math.random() * 201);\r",
									"\r",
									"const quantidade = randomQuant;\r",
									"const preco = randomPreco;\r",
									"\r",
									"pm.variables.set('quantidade', quantidade);\r",
									"pm.variables.set('preco', preco);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"propertyName = '_id'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"Cadastro realizado com sucesso\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": [
						{
							"name": "CT_ 302: Criar produto válido (com token)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "046fc1cfb8f11771cd59a30ba296d551"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:04 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"BsEbLlaZfUSHFC55\"\n}"
						}
					]
				},
				{
					"name": "CT_303: Criar produto válido (sem token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomQuant = Math.floor(Math.random() * 101);\r",
									"const randomPreco = Math.floor(Math.random() * 201);\r",
									"\r",
									"const quantidade = randomQuant;\r",
									"const preco = randomPreco;\r",
									"\r",
									"pm.variables.set('quantidade', quantidade);\r",
									"pm.variables.set('preco', preco);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{quantidade}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": [
						{
							"name": "CT_303: Criar produto válido (sem token)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{quantidade}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "0364f9a01e443951031efc4a3801830f"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:09 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "103"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
						}
					]
				},
				{
					"name": "CT_304: Criar produto inválido (valores incorretos)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'nome'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"nome não pode ficar em branco\");\r",
									"})\r",
									"\r",
									"propertyName = 'preco'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"preco deve ser um número\");\r",
									"})\r",
									"\r",
									"propertyName = 'descricao'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"descricao não pode ficar em branco\");\r",
									"})\r",
									"\r",
									"propertyName = 'quantidade'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"quantidade deve ser um número\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": \"{{$randomLoremWord}}\",\r\n  \"descricao\": \"\",\r\n  \"quantidade\": \"{{$randomLoremWord}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": [
						{
							"name": "CT_304: Criar produto inválido (valores incorretos)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"preco\": \"{{$randomLoremWord}}\",\r\n  \"descricao\": \"\",\r\n  \"quantidade\": \"{{$randomLoremWord}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "02f39c7e0d13c11bf52e80cb74d34171"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:14 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "198"
								}
							],
							"cookie": [],
							"body": "{\n    \"nome\": \"nome não pode ficar em branco\",\n    \"preco\": \"preco deve ser um número\",\n    \"descricao\": \"descricao não pode ficar em branco\",\n    \"quantidade\": \"quantidade deve ser um número\"\n}"
						}
					]
				},
				{
					"name": "CT_305: Criar produto inválido (campos vazios)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'nome'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"nome é obrigatório\");\r",
									"})\r",
									"\r",
									"propertyName = 'preco'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"preco é obrigatório\");\r",
									"})\r",
									"\r",
									"propertyName = 'descricao'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"descricao é obrigatório\");\r",
									"})\r",
									"\r",
									"propertyName = 'quantidade'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"quantidade é obrigatório\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": [
						{
							"name": "CT_305: Criar produto inválido (campos vazios)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/produtos",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "0fba3824583abc6c79b52125c31719d4"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:18 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "170"
								}
							],
							"cookie": [],
							"body": "{\n    \"nome\": \"nome é obrigatório\",\n    \"preco\": \"preco é obrigatório\",\n    \"descricao\": \"descricao é obrigatório\",\n    \"quantidade\": \"quantidade é obrigatório\"\n}"
						}
					]
				},
				{
					"name": "CT_306: Criar produto inválido (duplicidade)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const firstProduct = result.produtos[result.produtos.length - 1];\r",
									"            const nomeProduct = firstProduct.nome;\r",
									"            const descricaoProduct = firstProduct.descricao;\r",
									"\r",
									"            pm.variables.set('nomeProduct', nomeProduct);\r",
									"            pm.variables.set('descricaoProduct', descricaoProduct);\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const randomQuant = Math.floor(Math.random() * 101);\r",
									"const randomPreco = Math.floor(Math.random() * 201);\r",
									"\r",
									"const quantidade = randomQuant;\r",
									"const preco = randomPreco;\r",
									"\r",
									"pm.variables.set('quantidade', quantidade);\r",
									"pm.variables.set('preco', preco);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"Já existe produto com esse nome\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nomeProduct}}\",\r\n  \"preco\": {{preco}},\r\n  \"descricao\": \"{{descricaoProduct}}\",\r\n  \"quantidade\": {{quantidade}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": [
						{
							"name": "CT_306: Criar produto inválido (duplicidade)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProduct}}\",\r\n  \"preco\": {{preco}},\r\n  \"descricao\": \"{{descricaoProduct}}\",\r\n  \"quantidade\": {{quantidade}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "9a0e32d222f43ef263e8ccbc18b6a971"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:23 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "53"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Já existe produto com esse nome\"\n}"
						}
					]
				},
				{
					"name": "CT_307: Criar produto válido (sem admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 403\", function() {\r",
									"    pm.response.to.have.status(403);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"Rota exclusiva para administradores\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "CT_308: Listar produto por ID válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'nome'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"Logitech MX Vertical\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/BeeJh5lz3k6kSIzA",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"BeeJh5lz3k6kSIzA"
							]
						}
					},
					"response": [
						{
							"name": "CT_308: Listar produto por ID válido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/produtos/BeeJh5lz3k6kSIzA",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										"BeeJh5lz3k6kSIzA"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "434aa2585fd611c3954df014f852f6e1"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:35 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "136"
								}
							],
							"cookie": [],
							"body": "{\n    \"nome\": \"Logitech MX Vertical\",\n    \"preco\": 470,\n    \"descricao\": \"Mouse\",\n    \"quantidade\": 382,\n    \"_id\": \"BeeJh5lz3k6kSIzA\"\n}"
						}
					]
				},
				{
					"name": "CT_309: Listar produto por ID inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"Produto não encontrado\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/{{randomLoremWords}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{randomLoremWords}}"
							]
						}
					},
					"response": [
						{
							"name": "CT_309: Listar produto por ID inválido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/produtos/{{randomLoremWords}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										"{{randomLoremWords}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "03b676d0c8feb7c1133dfd84d3905d11"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:40 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "44"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Produto não encontrado\"\n}"
						}
					]
				},
				{
					"name": "CT_310: Editar produto por ID válido (com token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastProduct = result.produtos[result.produtos.length - 1];\r",
									"            const editProduct = lastProduct._id; \r",
									"            pm.environment.set('editProduct', editProduct);\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const nome = '{{$randomProductName}}'\r",
									"const descricao = '{{$randomProductMaterial}}'\r",
									"\r",
									"pm.variables.set('nome', nome);\r",
									"pm.variables.set('descricao', descricao);\r",
									"\r",
									"const randomQuant = Math.floor(Math.random() * 101);\r",
									"const randomPreco = Math.floor(Math.random() * 201);\r",
									"\r",
									"const quantidade = randomQuant;\r",
									"const preco = randomPreco;\r",
									"\r",
									"pm.variables.set('quantidade', quantidade);\r",
									"pm.variables.set('preco', preco);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Registro alterado com sucesso')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{editProduct}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{editProduct}}"
							]
						}
					},
					"response": [
						{
							"name": "CT_310: Editar produto por ID válido (com token)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos/{{editProduct}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										"{{editProduct}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "18b7f88f33bf0c5b00749fbec48f9006"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:44 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "50"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Registro alterado com sucesso\"\n}"
						}
					]
				},
				{
					"name": "CT_311: Editar produto por ID válido (sem token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastProduct = result.produtos[result.produtos.length - 1];\r",
									"            const editProduct = lastProduct._id; \r",
									"            pm.environment.set('editProduct', editProduct);\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const nome = '{{$randomProductName}}'\r",
									"const descricao = '{{$randomProductMaterial}}'\r",
									"\r",
									"pm.variables.set('nome', nome);\r",
									"pm.variables.set('descricao', descricao);\r",
									"\r",
									"const randomQuant = Math.floor(Math.random() * 101);\r",
									"const randomPreco = Math.floor(Math.random() * 201);\r",
									"\r",
									"const quantidade = randomQuant;\r",
									"const preco = randomPreco;\r",
									"\r",
									"pm.variables.set('quantidade', quantidade);\r",
									"pm.variables.set('preco', preco);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{editProduct}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{editProduct}}"
							]
						}
					},
					"response": [
						{
							"name": "CT_311: Editar produto por ID válido (sem token)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{name}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos/{{editProduct}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										"{{editProduct}}"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "922858ceef383a8ddaddbd568297a7d9"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:49 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "103"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
						}
					]
				},
				{
					"name": "CT_312: Editar produto inválido (caminho vazio)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 405\", function() {\r",
									"    pm.response.to.have.status(405);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Não é possível realizar PUT em /produtos/. Acesse https://serverest.dev para ver as rotas disponíveis e como utilizá-las.')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								""
							]
						}
					},
					"response": [
						{
							"name": "CT_312: Editar produto inválido (caminho vazio)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/produtos/",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										""
									]
								}
							},
							"status": "Method Not Allowed",
							"code": 405,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "6feb3d41add6fd2eea1d9e592527aeb4"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:53 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "147"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Não é possível realizar PUT em /produtos/. Acesse https://serverest.dev para ver as rotas disponíveis e como utilizá-las.\"\n}"
						}
					]
				},
				{
					"name": "CT_313: Editar produto inválido (campos vazios)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'nome'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('nome é obrigatório')\r",
									"})\r",
									"\r",
									"propertyName = 'preco'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('preco é obrigatório')\r",
									"})\r",
									"\r",
									"propertyName = 'descricao'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('descricao é obrigatório')\r",
									"})\r",
									"\r",
									"propertyName = 'quantidade'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('quantidade é obrigatório')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{host}}/produtos/{{randomLoremWords}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{randomLoremWords}}"
							]
						}
					},
					"response": [
						{
							"name": "CT_313: Editar produto inválido (campos vazios)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{host}}/produtos/{{randomLoremWords}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										"{{randomLoremWords}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "7dac735ffd9989ed88993d6b5087e72d"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:38:58 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "170"
								}
							],
							"cookie": [],
							"body": "{\n    \"nome\": \"nome é obrigatório\",\n    \"preco\": \"preco é obrigatório\",\n    \"descricao\": \"descricao é obrigatório\",\n    \"quantidade\": \"quantidade é obrigatório\"\n}"
						}
					]
				},
				{
					"name": "CT_314: Editar produto (novo ID)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const firstProduct = result.produtos[0];\r",
									"            const editProduct = firstProduct._id; \r",
									"\r",
									"            pm.environment.set('editProduct', editProduct);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"function geraStringAleatoria (size) {\r",
									"    var string = '';\r",
									"    var caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    for (var i = 0; i < size; i++) {\r",
									"        string += caracteres.charAt(Math.floor(Math.random() * caracteres.length));\r",
									"    }\r",
									"    return string;\r",
									"}\r",
									"\r",
									"const randomQuant = Math.floor(Math.random() * 101);\r",
									"const randomPreco = Math.floor(Math.random() * 201);\r",
									"\r",
									"const quantidade = randomQuant;\r",
									"const preco = randomPreco;\r",
									"const nome = '{{$randomProductName}}'\r",
									"const descricao = '{{$randomProductMaterial}}'\r",
									"const id = geraStringAleatoria(16);\r",
									"\r",
									"pm.variables.set('nome', nome);\r",
									"pm.variables.set('descricao', descricao);\r",
									"pm.variables.set('quantidade', quantidade);\r",
									"pm.variables.set('preco', preco);\r",
									"pm.environment.set('editNewProduct', id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Cadastro realizado com sucesso');\r",
									"})\r",
									"\r",
									"propertyName = '_id'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{editNewProduct}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{editNewProduct}}"
							]
						}
					},
					"response": [
						{
							"name": "CT_314: Editar produto (novo ID)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nome}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricao}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos/{{editNewProduct}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										"{{editNewProduct}}"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "8917de9fd8c63e48c23701e4f38d3b88"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:39:03 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"B0qBJPDNFGJoVrrX\"\n}"
						}
					]
				},
				{
					"name": "CT_315: Editar produto (duplicidade)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastProduct = result.produtos[result.produtos.length - 1];\r",
									"            const firstProduct = result.produtos[0];\r",
									"            const editProduct = lastProduct._id; \r",
									"            \r",
									"            const nome = firstProduct.nome\r",
									"            const quantidade = lastProduct.quantidade\r",
									"            const descricao = lastProduct.descricao;\r",
									"            const preco = lastProduct.preco;\r",
									"\r",
									"            pm.variables.set('nome', nome);\r",
									"            pm.variables.set('descricao', descricao);\r",
									"            pm.environment.set('editProduct', editProduct);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const randomQuant = Math.floor(Math.random() * 101);\r",
									"const randomPreco = Math.floor(Math.random() * 201);\r",
									"\r",
									"const quantidade = randomQuant;\r",
									"const preco = randomPreco;\r",
									"\r",
									"pm.variables.set('quantidade', quantidade);\r",
									"pm.variables.set('preco', preco);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Já existe produto com esse nome')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{nomeProduct}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricaoProduct}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/produtos/{{editProduct}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"produtos",
								"{{editProduct}}"
							]
						}
					},
					"response": [
						{
							"name": "CT_315: Editar produto (duplicidade)",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{nomeProduct}}\",\r\n  \"preco\": \"{{preco}}\",\r\n  \"descricao\": \"{{descricaoProduct}}\",\r\n  \"quantidade\": \"{{quantidade}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/produtos/{{editUser}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"produtos",
										"{{editUser}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "621da284dc2230fdc594b0393b209d1b"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:45:16 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "53"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Já existe produto com esse nome\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const host = pm.environment.get('host');",
							"",
							"const loginRequest = {",
							"    url: `${host}/login`,",
							"    method: \"POST\",",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"email\": \"fulano@qa.com\",",
							"            \"password\": \"teste\"",
							"        })",
							"    }",
							"}",
							"",
							"pm.sendRequest(loginRequest, (err, res) => {",
							"    console.log( err ? err : res.json());",
							"    pm.environment.set(\"token\", res.json().authorization.slice(7));",
							"})",
							"",
							"const productRequest = {",
							"    url: `${host}/produtos`,",
							"    method: \"POST\",",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"        'authorization': `Bearer ${pm.environment.get('token')}`",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(",
							"            {",
							"                \"nome\": \"Logitech MX Vertical\",",
							"                \"preco\": 470,",
							"                \"descricao\": \"Mouse\",",
							"                \"quantidade\": 381",
							"            }",
							"        )",
							"    }",
							"}",
							"",
							"pm.sendRequest(productRequest, (err, res) => {",
							"    console.log( err ? err : res.json());",
							"})"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Carrinhos",
			"item": [
				{
					"name": "CT_401: Listar todos os carrinhos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'quantidade'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'carrinhos'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								""
							]
						}
					},
					"response": [
						{
							"name": "CT_401: Listar todos os carrinhos",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "b8229697447a975508bbe61a26674844"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:40:36 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "595"
								}
							],
							"cookie": [],
							"body": "{\n    \"quantidade\": 1,\n    \"carrinhos\": [\n        {\n            \"produtos\": [\n                {\n                    \"idProduto\": \"BeeJh5lz3k6kSIzA\",\n                    \"quantidade\": 2,\n                    \"precoUnitario\": 470\n                },\n                {\n                    \"idProduto\": \"K6leHdftCeOJj8BJ\",\n                    \"quantidade\": 1,\n                    \"precoUnitario\": 5240\n                }\n            ],\n            \"precoTotal\": 6180,\n            \"quantidadeTotal\": 3,\n            \"idUsuario\": \"oUb7aGkMtSEPf6BZ\",\n            \"_id\": \"qbMqntef4iTOwWfg\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CT_402: Criar carrinho válido (com token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const deleteRequest = {\r",
									"    url: `${host}/carrinhos/concluir-compra`,\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    headers: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const firstProduct = result.produtos[0];\r",
									"            const id = firstProduct._id; \r",
									"\r",
									"            pm.variables.set('id', id);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const randomQuant = Math.floor(Math.random() * 11);\r",
									"const quantidade = randomQuant;\r",
									"pm.variables.set('quantidade', quantidade);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"propertyName = '_id'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"Cadastro realizado com sucesso\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id}}\",\r\n      \"quantidade\": \"{{quantidade}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/carrinhos",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": [
						{
							"name": "CT_402: Criar carrinho válido (com token)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id}}\",\r\n      \"quantidade\": \"{{quantidade}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/carrinhos",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "c01694dd6cb4cfe50fa1f25a60ddcbac"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:40:41 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "82"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Cadastro realizado com sucesso\",\n    \"_id\": \"BNnrtJnLAO0e02wD\"\n}"
						}
					]
				},
				{
					"name": "CT_403: Criar carrinho válido (sem token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const deleteRequest = {\r",
									"    url: `${host}/carrinhos/concluir-compra`,\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    headers: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const firstProduct = result.produtos[0];\r",
									"            const id = firstProduct._id; \r",
									"\r",
									"            pm.variables.set('id', id);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const randomQuant = Math.floor(Math.random() * 11);\r",
									"const quantidade = randomQuant;\r",
									"pm.variables.set('quantidade', quantidade);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id}}\",\r\n      \"quantidade\": \"{{quantidade}}\"\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/carrinhos",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": [
						{
							"name": "CT_403: Criar carrinho válido (sem token)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id}}\",\r\n      \"quantidade\": \"{{quantidade}}\"\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/carrinhos",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "13a1fd299f131f560f4b29c71b2eac53"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:40:47 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "103"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
						}
					]
				},
				{
					"name": "CT_404: Criar carrinho inválido (campos vazios)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const deleteRequest = {\r",
									"    url: `${host}/carrinhos/concluir-compra`,\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    headers: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const firstProduct = result.produtos[0];\r",
									"            const id = firstProduct._id; \r",
									"\r",
									"            pm.variables.set('id', id);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'produtos'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"produtos é obrigatório\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": [
						{
							"name": "CT_404: Criar carrinho inválido (campos vazios)",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "c43fd1eb301ee092ef4c419519d2147d"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:40:53 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "46"
								}
							],
							"cookie": [],
							"body": "{\n    \"produtos\": \"produtos é obrigatório\"\n}"
						}
					]
				},
				{
					"name": "CT_405: Listar carrinho por ID válido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'produtos'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.exist;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/qbMqntef4iTOwWfg",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"qbMqntef4iTOwWfg"
							]
						}
					},
					"response": [
						{
							"name": "CT_405: Listar carrinho por ID válido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/qbMqntef4iTOwWfg",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"qbMqntef4iTOwWfg"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "1923e4c5a6e27cfb5983e5855240800d"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:40:58 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "401"
								}
							],
							"cookie": [],
							"body": "{\n    \"produtos\": [\n        {\n            \"idProduto\": \"BeeJh5lz3k6kSIzA\",\n            \"quantidade\": 2,\n            \"precoUnitario\": 470\n        },\n        {\n            \"idProduto\": \"K6leHdftCeOJj8BJ\",\n            \"quantidade\": 1,\n            \"precoUnitario\": 5240\n        }\n    ],\n    \"precoTotal\": 6180,\n    \"quantidadeTotal\": 3,\n    \"idUsuario\": \"oUb7aGkMtSEPf6BZ\",\n    \"_id\": \"qbMqntef4iTOwWfg\"\n}"
						}
					]
				},
				{
					"name": "CT_406: Listar carrinho por ID inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql(\"Carrinho não encontrado\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/{{randomLoremWords}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"{{randomLoremWords}}"
							]
						}
					},
					"response": [
						{
							"name": "CT_406: Listar carrinho por ID inválido",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/{{randomLoremWords}}",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"{{randomLoremWords}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "6a865dd1365d80c00f9869ed3f23da9b"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:41:03 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "45"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Carrinho não encontrado\"\n}"
						}
					]
				},
				{
					"name": "CT_407: Deletar carrinho válido (com token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastProduct = result.produtos[result.produtos.length - 1];\r",
									"            const id = lastProduct._id;\r",
									"            const quantidade = lastProduct.quantidade;\r",
									"\r",
									"            pm.environment.set('idProduct', id);\r",
									"            pm.environment.set('quantidade', quantidade);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${host}/carrinhos`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"produtos\": [\r",
									"                {\r",
									"                \"idProduto\": `${pm.environment.get('idProduct')}`,\r",
									"                \"quantidade\": `${pm.environment.get('quantidade')}`\r",
									"                }\r",
									"            ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Registro excluído com sucesso')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/concluir-compra",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": [
						{
							"name": "CT_407: Deletar carrinho válido (com token)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/concluir-compra",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "bd13c6ea0fe1789dbade5df9e17c61d6"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:44:35 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "51"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Registro excluído com sucesso\"\n}"
						}
					]
				},
				{
					"name": "CT_408: Deletar carrinho válido (sem token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastProduct = result.produtos[result.produtos.length - 1];\r",
									"            const id = lastProduct._id;\r",
									"            const quantidade = lastProduct.quantidade;\r",
									"\r",
									"            pm.environment.set('idProduct', id);\r",
									"            pm.environment.set('quantidade', quantidade);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${host}/carrinhos`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"produtos\": [\r",
									"                {\r",
									"                \"idProduto\": `${pm.environment.get('idProduct')}`,\r",
									"                \"quantidade\": `${pm.environment.get('quantidade')}`\r",
									"                }\r",
									"            ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/concluir-compra",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": [
						{
							"name": "CT_408: Deletar carrinho válido (sem token)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/concluir-compra",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "5a8916d8f0de32f6b9e19e04647d3cdb"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:41:15 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "103"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
						}
					]
				},
				{
					"name": "CT_409: Deletar carrinho inválido (não existente)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const deleteRequest = {\r",
									"    url: `${host}/carrinhos/concluir-compra`,\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Não foi encontrado carrinho para esse usuário')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/concluir-compra",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": [
						{
							"name": "CT_409: Deletar carrinho inválido (não existente)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/concluir-compra",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "bc74c7c229dac7fedb0ee23e820c7830"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:41:21 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "68"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Não foi encontrado carrinho para esse usuário\"\n}"
						}
					]
				},
				{
					"name": "CT_410: Cancelar comprar válida (com token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastProduct = result.produtos[result.produtos.length - 1];\r",
									"            const id = lastProduct._id;\r",
									"            const quantidade = lastProduct.quantidade;\r",
									"\r",
									"            pm.environment.set('idProduct', id);\r",
									"            pm.environment.set('quantidade', quantidade);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${host}/carrinhos`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"produtos\": [\r",
									"                {\r",
									"                \"idProduto\": `${pm.environment.get('idProduct')}`,\r",
									"                \"quantidade\": `${pm.environment.get('quantidade')}`\r",
									"                }\r",
									"            ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Registro excluído com sucesso. Estoque dos produtos reabastecido')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/cancelar-compra",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": [
						{
							"name": "CT_410: Cancelar comprar válida (com token)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/cancelar-compra",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "23ccd3f80728fce0f66a8d929d45c2b6"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:44:51 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "86"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Registro excluído com sucesso. Estoque dos produtos reabastecido\"\n}"
						}
					]
				},
				{
					"name": "CT_411: Cancelar compra válida (sem token)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const getRequest = {\r",
									"    url: `${host}/produtos`,\r",
									"    method: \"GET\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(getRequest, (err, res) => {\r",
									"    if (err) {\r",
									"        console.error(err);\r",
									"    } else {\r",
									"        const result = res.json();\r",
									"\r",
									"        if (result.quantidade > 0) {\r",
									"            const lastProduct = result.produtos[result.produtos.length - 1];\r",
									"            const id = lastProduct._id;\r",
									"            const quantidade = lastProduct.quantidade;\r",
									"\r",
									"            pm.environment.set('idProduct', id);\r",
									"            pm.environment.set('quantidade', quantidade);\r",
									"\r",
									"        } else {\r",
									"            console.log(\"Nenhum produto encontrado na resposta.\");\r",
									"        }\r",
									"    }\r",
									"})\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${host}/carrinhos`,\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"produtos\": [\r",
									"                {\r",
									"                \"idProduto\": `${pm.environment.get('idProduct')}`,\r",
									"                \"quantidade\": `${pm.environment.get('quantidade')}`\r",
									"                }\r",
									"            ]\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Token de acesso ausente, inválido, expirado ou usuário do token não existe mais')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/cancelar-compra",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": [
						{
							"name": "CT_411: Cancelar compra válida (sem token)",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/cancelar-compra",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "63e4080a65b7ee81ebdf9b94d561da9d"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:41:35 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "103"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\"\n}"
						}
					]
				},
				{
					"name": "CT_412: Cancelar compra inválida",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const host = pm.environment.get('host');\r",
									"\r",
									"const deleteRequest = {\r",
									"    url: `${host}/carrinhos/concluir-compra`,\r",
									"    method: \"DELETE\",\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'authorization': `Bearer ${pm.environment.get('token')}`\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(deleteRequest, (err, res) => {\r",
									"    console.log( err ? err : res.json());\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"let propertyName;\r",
									"\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"propertyName = 'message'\r",
									"pm.test(`Contains ${propertyName} property with the correct text`, () =>  {\r",
									"    pm.expect(responseData[propertyName]).to.eql('Não foi encontrado carrinho para esse usuário')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/carrinhos/cancelar-compra",
							"host": [
								"{{host}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": [
						{
							"name": "CT_412: Cancelar compra inválida",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{host}}/carrinhos/cancelar-compra",
									"host": [
										"{{host}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "access-control-allow-origin",
									"value": "*"
								},
								{
									"key": "x-dns-prefetch-control",
									"value": "off"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "strict-transport-security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "x-download-options",
									"value": "noopen"
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block"
								},
								{
									"key": "content-type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "X-Cloud-Trace-Context",
									"value": "9eaa38347a541d1de13c64bfaadd4a9b"
								},
								{
									"key": "Date",
									"value": "Mon, 09 Oct 2023 03:41:42 GMT"
								},
								{
									"key": "Server",
									"value": "Google Frontend"
								},
								{
									"key": "Content-Length",
									"value": "68"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Não foi encontrado carrinho para esse usuário\"\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const host = pm.environment.get('host');",
							"",
							"const loginRequest = {",
							"    url: `${host}/login`,",
							"    method: \"POST\",",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"email\": \"fulano@qa.com\",",
							"            \"password\": \"teste\"",
							"        })",
							"    }",
							"}",
							"",
							"pm.sendRequest(loginRequest, (err, res) => {",
							"    console.log( err ? err : res.json());",
							"",
							"    pm.environment.set(\"token\", res.json().authorization.slice(7));",
							"})"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}